{"title":"深入浅出Volatile","date":"2018-11-18T12:45:53.223Z","thumbnail":"/images/wolf.jpg","slug":"volatile","tags":["java","volatile"],"categories":["java"],"updated":"2018-11-18T14:25:17.660Z","content":"<h2 id=\"深入浅出volatile\"><a href=\"#深入浅出volatile\" class=\"headerlink\" title=\"深入浅出volatile\"></a>深入浅出volatile</h2><ul>\n<li><p><strong>用途：</strong> </p>\n<ul>\n<li>保证变量可见性</li>\n<li><p>限制局部代码指令重排序</p>\n<p><img src=\"/images/v.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"volatile语义规范：\"><a href=\"#volatile语义规范：\" class=\"headerlink\" title=\"volatile语义规范：\"></a>volatile语义规范：</h4><ul>\n<li>使用volatile变量时，必须重新从主内存中加载，并且read、load是连续的</li>\n<li>修改volatile变量后，必须立刻同步到主内存，并且store、write是连续的</li>\n</ul>\n<hr>\n<h4 id=\"volatile不是线程安全的\"><a href=\"#volatile不是线程安全的\" class=\"headerlink\" title=\"volatile不是线程安全的\"></a>volatile不是线程安全的</h4><ul>\n<li><strong>原因：</strong> 因为没有锁机制，线程可以并发操作同一资源</li>\n</ul>\n<hr>\n<h3 id=\"volatile的使用场景\"><a href=\"#volatile的使用场景\" class=\"headerlink\" title=\"volatile的使用场景\"></a>volatile的使用场景</h3><h4 id=\"使用范围\"><a href=\"#使用范围\" class=\"headerlink\" title=\"使用范围\"></a>使用范围</h4><pre><code>1.volatile只可修饰成员变量（静态的和非静态的都可以），因为局部变量是线程独享的\n(java中没有全局变量这个概念，那个是c的，静态成员变量是属于类的，非静态则是对象的)\n\n2.多线程并发下，才需要使用它\n</code></pre><h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li><p>只有一个修改者，多个使用者，要求保证可见性的场景</p>\n<p>  1.状态标识</p>\n<p>  2.数据定期发布，多个获取者</p>\n</li>\n</ul>\n","prev":{"title":"Jvm","slug":"jvm"},"link":"http://yoursite.com/post/volatile/","toc":[{"title":"深入浅出volatile","id":"深入浅出volatile","index":"1","children":[{"title":"volatile的使用场景","id":"volatile的使用场景","index":"1.1","children":[{"title":"使用范围","id":"使用范围","index":"1.1.1"},{"title":"使用场景","id":"使用场景","index":"1.1.2"}]}]}]}